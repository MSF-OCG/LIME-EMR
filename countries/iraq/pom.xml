<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.ozonemsf</groupId>
  <artifactId>ozone-msf-iraq</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <artifactId>ozone-msf-distro</artifactId>
      <groupId>com.ozonemsf</groupId>
      <version>1.0.0-SNAPSHOT</version>
      <type>zip</type>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Unpack Ozone MSF zip -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.6.1</version>
        <executions>
          <execution>
            <id>Unpack Ozone MSF</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>${project.build.directory}/ozone-msf-distro</outputDirectory>
              <includeArtifactIds>ozone-msf-distro</includeArtifactIds>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.3.1</version>
        <executions>
          <execution>
            <!-- Copy Ozone MSF files -->
            <id>Copy Ozone MSF files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/ozone-msf-distro</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <!-- Override with local config files-->
            <id>Copy local resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/distro/configs</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/configs</directory>
                  <excludes>
                    <exclude>.gitkeep</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
          
        </executions>
      </plugin>
      

       <!-- packaging the distro as a installable/deployable file -->
       <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.6.0</version>
        <executions>
          <execution>
            <id>Package distro artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>bundled-docker</id>
      <properties>
        <!-- Groovy template version-->
        <groovyTemplatesVersion>3.0.22</groovyTemplatesVersion>
        <!-- Ozone Bundled version-->
        <ozoneBundledDocker>1.0.0-alpha.13</ozoneBundledDocker>
        <!-- Fabric8 Docker Maven Plugin version-->
        <dockerMavenPlugin>0.45.0</dockerMavenPlugin>
        <!-- Docker push registry-->
        <docker.push.registry>docker.io</docker.push.registry>
        <!-- Docker push registry username-->
        <docker.push.registry.username>mekomsolutions</docker.push.registry.username>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <!-- Override with local config files-->
                <id>Copy bundled docker resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/bundled-docker-build-tmp</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/../../distro/target/bundled-docker-build-tmp</directory>
                      <excludes>
                        <exclude>.gitkeep</exclude>
                      </excludes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <!-- Override with local config files-->
                <id>Copy scripts resources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/scripts</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>${project.basedir}/../../distro/target/scripts</directory>
                      <excludes>
                        <exclude>.gitkeep</exclude>
                      </excludes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <!-- Copy Docker Bundled compose file to run directory -->
                <id>Copy Docker compose file</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/${project.artifactId}-${project.version}/run/docker</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>
                        ${project.build.directory}/bundled-docker-build-tmp/bundled-docker</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>docker-compose-bundled.yml</include>
                        <include>docker-compose-bundled-sso.yml</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <!-- Copy Distro to tmp folder-->
                <id>Copy Distro</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/bundled-docker-build-tmp/distro</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>
                        ${project.build.directory}/${project.artifactId}-${project.version}/distro</directory>
                      <filtering>false</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <!-- Copy start-bundled.sh, start-bundled-sso.sh to scripts folder-->
                <id>Copy bundled-docker helper scripts</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/${project.artifactId}-${project.version}/run/docker/scripts
                  </outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>${project.build.directory}/bundled-docker-build-tmp/bundled-docker/scripts</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>start-bundled.sh</include>
                        <include>start-bundled-sso.sh</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>Unpack Ozone Bundled Docker to a temporary location</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <excludeTransitive>true</excludeTransitive>
                  <outputDirectory>
                    ${project.build.directory}/bundled-docker-build-tmp/bundled-docker</outputDirectory>
                  <includeArtifactIds>bundled-docker</includeArtifactIds>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.gmavenplus</groupId>
            <artifactId>gmavenplus-plugin</artifactId>
            <executions>
              <execution>
                <id>Generate Docker Compose Bundled yaml</id>
                <goals>
                  <goal>execute</goal>
                </goals>
                <phase>process-resources</phase>
                <configuration>
                  <scripts>
                    <script>
                      file://${project.build.directory}/scripts/openmrs/bundled-docker/generate-bundled-docker-compose.groovy</script>
                  </scripts>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${dockerMavenPlugin}</version>
            <configuration>
              <pushRegistry>${docker.push.registry}</pushRegistry>
              <images>
                <image>
                  <name>${docker.push.registry.username}/%a-openmrs-backend</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/openmrs/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-openmrs-frontend</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/frontend/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-proxy</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/proxy/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-odoo</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/odoo/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-senaite</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/senaite/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-senaite-sso</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/senaite/Dockerfile-sso</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-eip-odoo-openmrs</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/eip-odoo-openmrs/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-eip-openmrs-senaite</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/eip-openmrs-senaite/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-postgresql</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/postgresql/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-mysql</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/mysql/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-keycloak</name>
                  <build>
                    <dockerFile>
                      ${project.build.directory}/bundled-docker-build-tmp/bundled-docker/keycloak/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/bundled-docker-build-tmp/distro</contextDir>
                  </build>
                </image>
              </images>
              <tags>
                <tag>%l</tag>
              </tags>
              <buildx>
                <platforms>
                  <platform>linux/amd64</platform>
                  <platform>linux/arm64</platform>
                </platforms>
              </buildx>
            </configuration>
            <executions>
              <execution>
                <id>Build Bundled Docker images</id>
                <goals>
                  <goal>build</goal>
                </goals>
                <phase>package</phase>
              </execution>
              <execution>
                <id>Push Bundled Docker images</id>
                <goals>
                  <goal>push</goal>
                </goals>
                <phase>deploy</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>com.ozonehis</groupId>
          <artifactId>bundled-docker</artifactId>
          <type>zip</type>
          <version>${ozoneBundledDocker}</version>
        </dependency>
        <dependency>
          <groupId>org.codehaus.groovy</groupId>
          <artifactId>groovy-templates</artifactId>
          <version>${groovyTemplatesVersion}</version>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
  <repositories>
    <repository>
      <id>mks-nexus-public</id>
      <url>https://nexus.mekomsolutions.net/repository/maven-public/</url>
    </repository>
    <repository>
      <id>msf-ocg-github-lime-emr</id>
      <url>https://maven.pkg.github.com/MSF-OCG/LIME-EMR/</url>
    </repository>
  </repositories>
  
  <distributionManagement>
    <repository>
      <name>MSF repo for releases</name>
      <id>msf-ocg-github-lime-emr</id>
      <url>https://maven.pkg.github.com/MSF-OCG/LIME-EMR</url>
    </repository>
    <snapshotRepository>
      <name>MSF repo for snapshots</name>
      <id>msf-ocg-github-lime-emr</id>
      <url>https://maven.pkg.github.com/MSF-OCG/LIME-EMR</url>
    </snapshotRepository>
  </distributionManagement>
  
</project>
